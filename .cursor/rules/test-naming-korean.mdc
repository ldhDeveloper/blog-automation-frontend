---
description: 테스트 작성 시 한글 이름 사용 규칙
globs: src/**/*.test.{ts,tsx,js,jsx}
alwaysApply: true
---

# 테스트 작성 시 한글 이름 사용 규칙

## 🧪 테스트 이름 규칙

### 1. 테스트 함수명은 한글로 작성
```typescript
// ❌ DON'T: 영어로 작성
describe('UserLogin', () => {
  it('should render login form correctly', () => {
    // ...
  });
  
  it('should validate email input', () => {
    // ...
  });
});

// ✅ DO: 한글로 작성
describe('사용자 로그인', () => {
  it('로그인 폼이 올바르게 렌더링된다', () => {
    // ...
  });
  
  it('이메일 입력을 검증한다', () => {
    // ...
  });
});
```

### 2. describe 블록은 컴포넌트/기능명을 한글로
```typescript
// ❌ DON'T: 영어로 작성
describe('PostCreateForm', () => {
  describe('BasicInfoStep', () => {
    it('should handle title input', () => {
      // ...
    });
  });
});

// ✅ DO: 한글로 작성
describe('포스트 생성 폼', () => {
  describe('기본 정보 입력 단계', () => {
    it('제목 입력을 처리한다', () => {
      // ...
    });
  });
});
```

### 3. it/test 함수는 동작을 한글로 설명
```typescript
// ❌ DON'T: 영어로 작성
it('should display error message when title is empty', () => {
  // ...
});

it('should navigate to next step when form is valid', () => {
  // ...
});

it('should prevent submission with invalid data', () => {
  // ...
});

// ✅ DO: 한글로 작성
it('제목이 비어있을 때 에러 메시지를 표시한다', () => {
  // ...
});

it('폼이 유효할 때 다음 단계로 이동한다', () => {
  // ...
});

it('유효하지 않은 데이터로는 제출을 방지한다', () => {
  // ...
});
```

## 📋 테스트 구조 가이드

### 1. 기본 구조
```typescript
describe('컴포넌트명', () => {
  describe('기능/상황별 그룹', () => {
    it('구체적인 동작 설명', () => {
      // Given: 준비
      // When: 실행
      // Then: 검증
    });
  });
});
```

### 2. 예시: 포스트 생성 폼 테스트
```typescript
describe('포스트 생성 폼', () => {
  describe('기본 렌더링', () => {
    it('모든 단계가 올바르게 표시된다', () => {
      // ...
    });
    
    it('첫 번째 단계가 기본으로 활성화된다', () => {
      // ...
    });
  });

  describe('폼 유효성 검사', () => {
    it('필수 필드가 비어있으면 다음 단계로 진행할 수 없다', () => {
      // ...
    });
    
    it('제목이 200자를 초과하면 유효성 검사에 실패한다', () => {
      // ...
    });
  });

  describe('단계별 네비게이션', () => {
    it('유효한 입력 후 다음 단계로 이동할 수 있다', () => {
      // ...
    });
    
    it('이전 버튼으로 단계를 되돌릴 수 있다', () => {
      // ...
    });
  });
});
```

### 3. 예시: API 테스트
```typescript
describe('포스트 API', () => {
  describe('POST /api/posts', () => {
    it('유효한 데이터로 포스트를 생성한다', () => {
      // ...
    });
    
    it('유효하지 않은 데이터로는 400 에러를 반환한다', () => {
      // ...
    });
    
    it('인증되지 않은 사용자는 401 에러를 반환한다', () => {
      // ...
    });
  });
});
```

## 🎯 테스트 이름 작성 가이드

### 1. 동사 중심으로 작성
```typescript
// ✅ 좋은 예시
it('사용자 정보를 로드한다', () => {});
it('에러 메시지를 표시한다', () => {});
it('폼을 제출한다', () => {});
it('데이터를 검증한다', () => {});

// ❌ 피해야 할 예시
it('사용자 정보 로드', () => {}); // 명사형
it('에러 메시지 표시', () => {}); // 명사형
```

### 2. 구체적인 상황을 명시
```typescript
// ✅ 좋은 예시
it('이메일이 유효하지 않을 때 에러를 표시한다', () => {});
it('비밀번호가 8자 미만일 때 검증에 실패한다', () => {});
it('네트워크 오류 시 재시도 버튼을 표시한다', () => {});

// ❌ 피해야 할 예시
it('에러를 표시한다', () => {}); // 너무 일반적
it('검증에 실패한다', () => {}); // 상황이 불명확
```

### 3. Given-When-Then 패턴 활용
```typescript
it('사용자가 유효한 이메일을 입력하면 다음 단계로 진행한다', () => {
  // Given: 유효한 이메일 데이터 준비
  const validEmail = 'test@example.com';
  
  // When: 이메일 입력 및 다음 버튼 클릭
  // ...
  
  // Then: 다음 단계로 이동 확인
  // ...
});
```

## 🔍 테스트 그룹화 규칙

### 1. 기능별 그룹화
```typescript
describe('로그인 폼', () => {
  describe('렌더링', () => {
    // 렌더링 관련 테스트들
  });
  
  describe('유효성 검사', () => {
    // 유효성 검사 관련 테스트들
  });
  
  describe('사용자 상호작용', () => {
    // 사용자 상호작용 관련 테스트들
  });
  
  describe('API 통합', () => {
    // API 통합 관련 테스트들
  });
});
```

### 2. 시나리오별 그룹화
```typescript
describe('포스트 생성', () => {
  describe('성공 시나리오', () => {
    // 정상적인 경우의 테스트들
  });
  
  describe('실패 시나리오', () => {
    // 오류 상황의 테스트들
  });
  
  describe('엣지 케이스', () => {
    // 특수한 상황의 테스트들
  });
});
```

## 📝 테스트 작성 체크리스트

### 1. 테스트 이름 작성 시
- [ ] 한글로 작성했는가?
- [ ] 동사 중심으로 작성했는가?
- [ ] 구체적인 상황을 명시했는가?
- [ ] Given-When-Then 패턴을 활용했는가?

### 2. 테스트 구조 작성 시
- [ ] describe 블록을 적절히 그룹화했는가?
- [ ] 각 테스트가 하나의 동작만 검증하는가?
- [ ] 테스트 간 의존성이 없는가?

### 3. 테스트 내용 작성 시
- [ ] Given-When-Then 구조를 따랐는가?
- [ ] 테스트 데이터가 명확한가?
- [ ] 검증 로직이 명확한가?

## 🚫 피해야 할 패턴

### 1. 영어와 한글 혼용
```typescript
// ❌ DON'T: 영어와 한글 혼용
describe('UserLogin', () => {
  it('사용자 정보를 로드한다', () => {});
});

// ✅ DO: 일관성 있게 한글 사용
describe('사용자 로그인', () => {
  it('사용자 정보를 로드한다', () => {});
});
```

### 2. 너무 일반적인 이름
```typescript
// ❌ DON'T: 너무 일반적
it('작동한다', () => {});
it('렌더링된다', () => {});

// ✅ DO: 구체적
it('유효한 데이터로 포스트를 생성한다', () => {});
it('모든 필수 필드가 올바르게 렌더링된다', () => {});
```

### 3. 테스트 내용과 불일치
```typescript
// ❌ DON'T: 이름과 내용이 다름
it('사용자 정보를 로드한다', () => {
  // 실제로는 에러 처리를 테스트함
});

// ✅ DO: 이름과 내용이 일치
it('네트워크 오류 시 에러 메시지를 표시한다', () => {
  // 에러 처리 테스트
});
```

이 규칙을 따르면 한국어로 작성된 명확하고 이해하기 쉬운 테스트 코드를 작성할 수 있습니다.