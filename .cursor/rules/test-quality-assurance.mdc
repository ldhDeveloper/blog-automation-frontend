# 테스트 품질 보장 규칙

## 목적
테스트 코드의 품질을 보장하고, 실제 컴포넌트와의 동기화를 자동으로 검증하는 규칙을 제공합니다.

## 자동 검증 규칙

### 1. 테스트 작성 시 필수 검증
테스트를 작성하거나 수정할 때 다음을 자동으로 검증:

```markdown
1. 실제 컴포넌트 파일이 존재하는지 확인
2. 테스트에서 사용하는 props가 실제 interface와 일치하는지 확인
3. 테스트에서 찾는 텍스트가 실제 컴포넌트에 존재하는지 확인
4. 테스트에서 사용하는 이벤트 핸들러가 실제로 존재하는지 확인
```

### 2. Mock 데이터 검증
```markdown
1. Mock 데이터가 실제 데이터 구조와 일치하는지 확인
2. 필수 필드가 모두 포함되어 있는지 확인
3. 타입이 실제 interface와 일치하는지 확인
```

### 3. DOM 쿼리 검증
```markdown
1. 사용하는 role, aria-label이 실제 DOM에 존재하는지 확인
2. CSS 클래스명이 실제 컴포넌트에서 사용하는 것과 일치하는지 확인
3. data-testid가 실제 컴포넌트에 정의되어 있는지 확인
```

## 품질 기준

### 1. 테스트 정확성
- ✅ 실제 컴포넌트의 동작을 정확히 검증
- ✅ 실제 데이터와 일치하는 Mock 사용
- ✅ 실제 텍스트와 정확히 일치하는 검증
- ❌ 존재하지 않는 기능을 테스트
- ❌ 실제와 다른 데이터를 사용

### 2. 테스트 유지보수성
- ✅ 간단하고 명확한 테스트
- ✅ 실제 컴포넌트 변경 시 적절히 실패
- ✅ 테스트 의도가 명확함
- ❌ 과도하게 복잡한 테스트
- ❌ 불필요한 Mock 설정

### 3. 테스트 커버리지
- ✅ 주요 기능과 사용자 시나리오 커버
- ✅ 에러 케이스와 엣지 케이스 커버
- ✅ 접근성 요구사항 커버
- ❌ 구현 세부사항에 과도하게 의존

## 자동 검증 도구

### 1. 컴포넌트 분석 도구
```typescript
// 테스트 작성 전 컴포넌트 분석
const componentAnalysis = {
  props: '실제 props interface 확인',
  text: '실제 렌더링 텍스트 확인',
  handlers: '실제 이벤트 핸들러 확인',
  dom: '실제 DOM 구조 확인'
};
```

### 2. 테스트 검증 도구
```typescript
// 테스트 실행 후 검증
const testValidation = {
  accuracy: '실제 컴포넌트와 일치하는지 확인',
  coverage: '필요한 기능을 모두 테스트하는지 확인',
  maintainability: '유지보수하기 쉬운지 확인'
};
```

### 3. 동기화 검증 도구
```typescript
// 컴포넌트 변경 시 테스트 동기화 확인
const syncValidation = {
  props: 'Props 변경사항이 테스트에 반영되었는지 확인',
  text: '텍스트 변경사항이 테스트에 반영되었는지 확인',
  behavior: '동작 변경사항이 테스트에 반영되었는지 확인'
};
```

## 품질 체크리스트

### 테스트 작성 전
```markdown
## 사전 검증 체크리스트
- [ ] 실제 컴포넌트 파일을 읽었는가?
- [ ] 컴포넌트의 TypeScript interface를 확인했는가?
- [ ] 실제 렌더링 결과를 확인했는가?
- [ ] 기존 테스트가 있는지 확인했는가?
- [ ] 테스트 목적이 명확한가?
```

### 테스트 작성 중
```markdown
## 작성 중 검증 체크리스트
- [ ] Mock 데이터가 실제 구조와 일치하는가?
- [ ] 테스트 텍스트가 실제 텍스트와 일치하는가?
- [ ] Props가 실제 interface와 일치하는가?
- [ ] 이벤트 핸들러가 실제 존재하는가?
- [ ] DOM 쿼리가 실제 구조와 일치하는가?
- [ ] 테스트가 실제 동작을 검증하는가?
```

### 테스트 작성 후
```markdown
## 사후 검증 체크리스트
- [ ] 테스트가 성공적으로 실행되는가?
- [ ] 테스트가 실제 컴포넌트를 정확히 검증하는가?
- [ ] 테스트가 컴포넌트 변경 시 적절히 실패하는가?
- [ ] 테스트가 유지보수하기 쉬운가?
- [ ] 테스트 의도가 명확한가?
```

## 자동화 스크립트

### 1. 테스트 전 검증 스크립트
```bash
#!/bin/bash
# 테스트 작성 전 컴포넌트 분석
echo "🔍 컴포넌트 분석 중..."
read_file target_file=src/components/$1.tsx
echo "✅ 컴포넌트 분석 완료"
```

### 2. 테스트 실행 및 검증 스크립트
```bash
#!/bin/bash
# 테스트 실행 및 결과 검증
echo "🧪 테스트 실행 중..."
npm test $1
echo "✅ 테스트 실행 완료"
```

### 3. 동기화 검증 스크립트
```bash
#!/bin/bash
# 컴포넌트와 테스트 동기화 검증
echo "🔄 동기화 검증 중..."
npm test --run
echo "✅ 동기화 검증 완료"
```

## 품질 지표

### 1. 정확성 지표
- 테스트 성공률: 95% 이상
- 실제 컴포넌트와 일치율: 100%
- Mock 데이터 정확성: 100%

### 2. 유지보수성 지표
- 테스트 복잡도: 낮음
- 테스트 가독성: 높음
- 테스트 안정성: 높음

### 3. 커버리지 지표
- 기능 커버리지: 90% 이상
- 에러 케이스 커버리지: 80% 이상
- 접근성 커버리지: 70% 이상

## 마무리

이 규칙들을 따르면 테스트 코드의 품질을 보장하고, 
실제 컴포넌트와의 동기화를 자동으로 검증할 수 있습니다.
항상 품질 기준을 준수하고, 
자동화 도구를 활용하여 일관된 품질을 유지하세요.