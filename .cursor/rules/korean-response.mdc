---
description: 영어 질문에도 한글로 응답하는 규칙
globs: **/*
alwaysApply: true
---

# 한국어 응답 규칙

## 📋 응답 언어 규칙

- **모든 응답은 한국어로 작성해야 합니다**
- 사용자가 영어로 질문하더라도 반드시 한국어로 답변하세요
- 코드 주석, 에러 메시지, 설명 모두 한국어로 작성하세요

### ✅ DO: 한국어 응답
```typescript
// ✅ DO: 영어 질문에 한국어로 답변
// 사용자: "How can I fix this error?"
// 응답: "이 오류를 수정하려면 다음과 같이 하세요..."

// ✅ DO: 코드 주석도 한국어로
const handleSubmit = async (data: FormData) => {
  // 폼 데이터 검증
  if (!data.email) {
    throw new Error('이메일이 필요합니다');
  }
  
  // API 호출
  const result = await submitForm(data);
  return result;
};
```

### ❌ DON'T: 영어 응답
```typescript
// ❌ DON'T: 영어로 답변하지 마세요
// 사용자: "How can I fix this error?"
// 응답: "You can fix this error by doing..."

// ❌ DON'T: 영어 주석 사용하지 마세요
const handleSubmit = async (data: FormData) => {
  // Validate form data
  if (!data.email) {
    throw new Error('Email is required');
  }
};
```

## 🌍 다국어 상황 처리

### 기술 용어 및 코드
- **기술 용어**: 영어 원문과 한국어 번역을 병행 사용
- **코드 변수명**: 영어 유지 (일반적인 관례)
- **API 엔드포인트**: 영어 유지

```typescript
// ✅ DO: 기술 용어는 영어와 한국어 병행
// "React Query(리액트 쿼리)를 사용하여 데이터를 가져오겠습니다"
// "TypeScript(타입스크립트) 인터페이스를 정의하세요"

interface UserProfile {  // 변수명은 영어 유지
  id: string;
  name: string;
}
```

### 설명 및 응답 구조
- **문제 분석**: 한국어로 상황 설명
- **해결 방법**: 한국어로 단계별 안내
- **코드 예시**: 한국어 주석과 함께 제공

## 📝 응답 템플릿

### 오류 수정 요청
```
이 오류는 [원인]으로 인해 발생합니다.

다음 단계로 수정할 수 있습니다:
1. [첫 번째 단계]
2. [두 번째 단계]
3. [세 번째 단계]

수정된 코드:
[한국어 주석이 포함된 코드]
```

### 기능 구현 요청
```
[기능명]을 구현하겠습니다.

구현 방향:
- [접근 방법 1]
- [접근 방법 2]

코드 구현:
[한국어 설명과 주석이 포함된 코드]
```

## 🚫 예외 상황

다음의 경우에만 영어 사용이 허용됩니다:
- **라이브러리 공식 문서** 인용 시
- **에러 메시지** 원문 그대로 인용 시
- **코드 변수명, 함수명** (일반적인 개발 관례)

## 📋 체크리스트

모든 응답 전에 확인하세요:
- [ ] 응답이 한국어로 작성되었는가?
- [ ] 코드 주석이 한국어로 작성되었는가?
- [ ] 기술 용어에 한국어 설명이 포함되었는가?
- [ ] 사용자가 이해하기 쉬운 한국어 표현을 사용했는가?

이 규칙을 통해 사용자가 어떤 언어로 질문하더라도 일관성 있는 한국어 응답을 제공할 수 있습니다.