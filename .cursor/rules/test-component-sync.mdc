# 테스트-컴포넌트 동기화 규칙

## 목적
테스트 코드가 실제 컴포넌트와 일치하지 않는 문제를 방지하고, 테스트의 정확성과 유지보수성을 향상시킵니다.

## 핵심 원칙

### 1. 테스트 작성 전 컴포넌트 분석 필수
- 테스트를 작성하기 전에 반드시 실제 컴포넌트 파일을 먼저 읽고 분석
- 컴포넌트의 실제 props, state, 이벤트 핸들러, 렌더링 로직을 정확히 파악
- 컴포넌트의 실제 텍스트, 클래스명, ARIA 속성 등을 확인

### 2. 테스트 텍스트는 실제 컴포넌트에서 추출
- 테스트에서 찾는 텍스트는 실제 컴포넌트에 존재하는 텍스트와 정확히 일치해야 함
- placeholder, label, button text 등은 실제 컴포넌트에서 복사
- 정규식 사용 시 실제 텍스트와 매칭되는지 확인

### 3. Props와 State 검증
- 테스트에서 사용하는 props는 실제 컴포넌트의 interface와 일치
- Mock 데이터는 실제 데이터 구조와 동일한 형태로 작성
- Optional props는 실제 컴포넌트의 기본값과 일치

### 4. 이벤트 핸들러 검증
- 테스트에서 호출하는 함수명은 실제 컴포넌트의 함수명과 일치
- 이벤트 핸들러의 매개변수는 실제 시그니처와 일치
- 콜백 함수의 호출 시점과 조건을 실제 로직과 일치

### 5. DOM 구조 검증
- 테스트에서 찾는 role, aria-label 등은 실제 렌더링되는 DOM과 일치
- CSS 클래스명은 실제 컴포넌트에서 사용하는 클래스와 일치
- 테스트 ID는 실제 컴포넌트에 정의된 data-testid와 일치

## 체크리스트

### 테스트 작성 전
- [ ] 실제 컴포넌트 파일을 읽었는가?
- [ ] 컴포넌트의 props interface를 확인했는가?
- [ ] 실제 렌더링되는 텍스트를 확인했는가?
- [ ] 이벤트 핸들러의 시그니처를 확인했는가?

### 테스트 작성 중
- [ ] Mock 데이터가 실제 데이터 구조와 일치하는가?
- [ ] 테스트 텍스트가 실제 컴포넌트 텍스트와 일치하는가?
- [ ] Props가 실제 interface와 일치하는가?
- [ ] 이벤트 핸들러 호출이 실제 로직과 일치하는가?

### 테스트 작성 후
- [ ] 테스트가 실제 컴포넌트 동작을 정확히 검증하는가?
- [ ] 불필요한 테스트나 존재하지 않는 기능을 테스트하지 않는가?
- [ ] 테스트가 컴포넌트 변경 시 적절히 실패하는가?

## 금지사항

### ❌ 하지 말아야 할 것들
- 실제 컴포넌트를 확인하지 않고 테스트 작성
- 존재하지 않는 props나 메서드 테스트
- 실제와 다른 텍스트나 클래스명 사용
- 컴포넌트에 없는 기능을 가정한 테스트
- 과도하게 복잡한 Mock 설정

### ✅ 해야 할 것들
- 실제 컴포넌트 분석 후 테스트 작성
- 실제 데이터 구조와 일치하는 Mock 사용
- 실제 텍스트와 정확히 일치하는 검증
- 컴포넌트의 실제 동작을 검증하는 테스트
- 간단하고 명확한 테스트 작성

## 예시

### ❌ 잘못된 예시
```typescript
// 실제 컴포넌트에는 '새 포스트 생성' 버튼이 없음
expect(screen.getByRole('button', { name: /새 포스트 작성/ })).toBeInTheDocument();

// 실제 컴포넌트에는 onRefresh prop이 없음
render(<PostsHeader onRefresh={mockRefresh} />);

// 실제 텍스트와 다름
expect(screen.getByText('포스트를 불러오는 중...')).toBeInTheDocument();
```

### ✅ 올바른 예시
```typescript
// 실제 컴포넌트의 정확한 텍스트 사용
expect(screen.getByRole('button', { name: /새 포스트 생성/ })).toBeInTheDocument();

// 실제 컴포넌트의 실제 props만 사용
render(<PostsHeader />);

// 실제 컴포넌트의 정확한 텍스트 사용
expect(screen.getByText('타임라인 로딩 중...')).toBeInTheDocument();
```

## 도구 활용

### 1. 컴포넌트 분석 도구
- `read_file` 도구로 실제 컴포넌트 파일 읽기
- TypeScript interface 확인
- 실제 렌더링 결과 확인

### 2. 테스트 검증 도구
- `npm test` 실행으로 테스트 결과 확인
- 실패한 테스트의 실제 DOM 구조 확인
- 테스트와 실제 컴포넌트 간 불일치 지점 파악

### 3. 리팩토링 시 주의사항
- 컴포넌트 변경 시 관련 테스트도 함께 업데이트
- 테스트가 여전히 유효한지 확인
- 새로운 기능에 대한 테스트 추가

## 마무리

테스트는 실제 컴포넌트의 동작을 정확히 검증해야 합니다. 
테스트 작성 전 반드시 실제 컴포넌트를 분석하고, 
실제와 일치하는 데이터와 텍스트를 사용하여 
신뢰할 수 있는 테스트를 작성하세요.