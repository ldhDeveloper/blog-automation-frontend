openapi: 3.0.3
info:
  title: 블로그 자동화 시스템 API
  description: |
    블로그 자동화 시스템의 REST API 명세서입니다.
    Next.js App Router와 Supabase를 기반으로 구축되었습니다.
  version: 1.0.0
  contact:
    name: API Support
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://your-domain.com/api
    description: 프로덕션 서버
  - url: http://localhost:3000/api
    description: 개발 서버

security:
  - BearerAuth: []

paths:
  /posts:
    get:
      summary: 포스트 목록 조회
      description: 사용자의 포스트 목록을 페이지네이션과 함께 조회합니다.
      tags:
        - Posts
      parameters:
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 성공적으로 포스트 목록을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedPostResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: 포스트 생성
      description: 새로운 포스트를 생성합니다.
      tags:
        - Posts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '201':
          description: 포스트가 성공적으로 생성되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}:
    get:
      summary: 포스트 상세 조회
      description: 특정 포스트의 상세 정보를 조회합니다.
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: 포스트 ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 성공적으로 포스트를 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: 포스트 수정
      description: 기존 포스트를 수정합니다.
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: 포스트 ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePostRequest'
      responses:
        '200':
          description: 포스트가 성공적으로 수정되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: 포스트 삭제
      description: 포스트를 삭제합니다.
      tags:
        - Posts
      parameters:
        - name: id
          in: path
          required: true
          description: 포스트 ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 포스트가 성공적으로 삭제되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /channels:
    get:
      summary: 채널 목록 조회
      description: 사용자의 채널 목록을 조회합니다.
      tags:
        - Channels
      responses:
        '200':
          description: 성공적으로 채널 목록을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: 채널 생성
      description: 새로운 채널을 생성합니다.
      tags:
        - Channels
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '201':
          description: 채널이 성공적으로 생성되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /channels/{id}:
    get:
      summary: 채널 상세 조회
      description: 특정 채널의 상세 정보를 조회합니다.
      tags:
        - Channels
      parameters:
        - name: id
          in: path
          required: true
          description: 채널 ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 성공적으로 채널을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: 채널 수정
      description: 채널 정보를 수정합니다.
      tags:
        - Channels
      parameters:
        - name: id
          in: path
          required: true
          description: 채널 ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelRequest'
      responses:
        '200':
          description: 채널이 성공적으로 수정되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      summary: 채널 삭제
      description: 채널을 삭제합니다.
      tags:
        - Channels
      parameters:
        - name: id
          in: path
          required: true
          description: 채널 ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 채널이 성공적으로 삭제되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /workspaces:
    get:
      summary: 워크스페이스 목록 조회
      description: 사용자가 속한 워크스페이스 목록을 조회합니다.
      tags:
        - Workspaces
      responses:
        '200':
          description: 성공적으로 워크스페이스 목록을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    post:
      summary: 워크스페이스 생성
      description: 새로운 워크스페이스를 생성합니다.
      tags:
        - Workspaces
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
      responses:
        '201':
          description: 워크스페이스가 성공적으로 생성되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /user/profile:
    get:
      summary: 사용자 프로필 조회
      description: 현재 사용자의 프로필 정보를 조회합니다.
      tags:
        - Users
      responses:
        '200':
          description: 성공적으로 프로필을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    put:
      summary: 사용자 프로필 수정
      description: 사용자 프로필을 수정합니다.
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: 프로필이 성공적으로 수정되었습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          $ref: '#/components/responses/BadRequestError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /jobs:
    get:
      summary: 작업 목록 조회
      description: 포스트 관련 작업 목록을 조회합니다.
      tags:
        - Jobs
      parameters:
        - name: postId
          in: query
          description: 특정 포스트의 작업만 조회
          required: false
          schema:
            type: string
            format: uuid
        - name: status
          in: query
          description: 작업 상태로 필터링
          required: false
          schema:
            type: string
            enum: [pending, running, completed, failed]
        - name: page
          in: query
          description: 페이지 번호
          required: false
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          description: 페이지당 항목 수
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
      responses:
        '200':
          description: 성공적으로 작업 목록을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobListResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /posts/{id}/timeline:
    get:
      summary: 포스트 타임라인 조회
      description: 포스트의 타임라인 이벤트를 조회합니다.
      tags:
        - Timeline
      parameters:
        - name: id
          in: path
          required: true
          description: 포스트 ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: 성공적으로 타임라인을 조회했습니다.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TimelineResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    # 기본 응답 스키마
    ApiResponse:
      type: object
      required:
        - success
        - data
      properties:
        success:
          type: boolean
        data:
          type: object
        message:
          type: string

    SuccessResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string

    ErrorResponse:
      type: object
      required:
        - success
        - message
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
        code:
          type: string
        details:
          type: object

    Pagination:
      type: object
      required:
        - page
        - limit
        - total
        - totalPages
      properties:
        page:
          type: integer
          minimum: 1
        limit:
          type: integer
          minimum: 1
        total:
          type: integer
          minimum: 0
        totalPages:
          type: integer
          minimum: 0

    # 포스트 관련 스키마
    Post:
      type: object
      required:
        - id
        - title
        - content
        - status
        - channelId
        - workspaceId
        - authorId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          minLength: 1
          maxLength: 200
        content:
          type: string
        status:
          type: string
          enum: [ideate, draft, image, seo, publish, published, failed, generating, ready]
        channelId:
          type: string
          format: uuid
        workspaceId:
          type: string
          format: uuid
        authorId:
          type: string
          format: uuid
        publishedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        metadata:
          type: object
          properties:
            readTime:
              type: integer
              minimum: 0
            wordCount:
              type: integer
              minimum: 0
            tags:
              type: array
              items:
                type: string
            seoScore:
              type: integer
              minimum: 0
              maximum: 100

    CreatePostRequest:
      type: object
      required:
        - title
        - topic
        - channelIds
        - isPublic
        - tags
        - allowComments
        - notifyFollowers
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 200
          description: 포스트 제목
        topic:
          type: string
          minLength: 1
          maxLength: 100
          description: 주제
        keywords:
          type: string
          maxLength: 500
          description: 키워드
        channelIds:
          type: array
          items:
            type: string
            format: uuid
          minItems: 1
          description: 채널 ID 배열
        isPublic:
          type: boolean
          description: 공개 여부
        tags:
          type: array
          items:
            type: string
          description: 태그 배열
        scheduledAt:
          type: string
          format: date-time
          description: 예약 발행 시간
        allowComments:
          type: boolean
          description: 댓글 허용 여부
        notifyFollowers:
          type: boolean
          description: 팔로워 알림 여부
        content:
          type: string
          description: 포스트 내용
        excerpt:
          type: string
          maxLength: 300
          description: 요약

    PostResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Post'

    PaginatedPostResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Post'
            pagination:
              $ref: '#/components/schemas/Pagination'

    # 채널 관련 스키마
    Channel:
      type: object
      required:
        - id
        - name
        - platform
        - settings
        - workspaceId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        platform:
          type: string
        settings:
          type: object
        workspaceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateChannelRequest:
      type: object
      required:
        - name
        - platform
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        platform:
          type: string
        settings:
          type: object
          default: {}

    ChannelResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Channel'

    ChannelListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Channel'

    # 워크스페이스 관련 스키마
    Workspace:
      type: object
      required:
        - id
        - name
        - ownerId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        description:
          type: string
        ownerId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    CreateWorkspaceRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
        description:
          type: string

    WorkspaceResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/Workspace'

    WorkspaceListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Workspace'

    # 사용자 관련 스키마
    User:
      type: object
      required:
        - id
        - email
        - name
        - role
        - workspaceId
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        name:
          type: string
          minLength: 1
        avatar:
          type: string
          format: uri
        role:
          type: string
          enum: [owner, admin, member]
        workspaceId:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 1
        avatar:
          type: string
          format: uri

    UserResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/User'

    # 작업 관련 스키마
    Job:
      type: object
      required:
        - id
        - postId
        - type
        - status
        - createdAt
        - updatedAt
      properties:
        id:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        type:
          type: string
        status:
          type: string
          enum: [pending, running, completed, failed]
        result:
          type: object
        error:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    JobListResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/Job'
            pagination:
              $ref: '#/components/schemas/Pagination'

    # 타임라인 관련 스키마
    TimelineEvent:
      type: object
      required:
        - id
        - postId
        - type
        - status
        - timestamp
        - message
      properties:
        id:
          type: string
          format: uuid
        postId:
          type: string
          format: uuid
        type:
          type: string
          enum: [ideate, draft, image, seo, publish]
        status:
          type: string
          enum: [pending, in-progress, completed, failed]
        timestamp:
          type: string
          format: date-time
        message:
          type: string
        duration:
          type: integer
          minimum: 0
          description: 소요 시간 (초)
        error:
          type: string
        metadata:
          type: object

    TimelineResponse:
      allOf:
        - $ref: '#/components/schemas/ApiResponse'
        - type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/TimelineEvent'

  responses:
    BadRequestError:
      description: 잘못된 요청
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "입력 데이터가 올바르지 않습니다"
            code: "VALIDATION_ERROR"

    UnauthorizedError:
      description: 인증 실패
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "인증이 필요합니다"
            code: "UNAUTHORIZED"

    NotFoundError:
      description: 리소스를 찾을 수 없음
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "리소스를 찾을 수 없습니다"
            code: "NOT_FOUND"

    InternalServerError:
      description: 서버 내부 오류
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            message: "서버 오류가 발생했습니다"
            code: "INTERNAL_SERVER_ERROR"

tags:
  - name: Posts
    description: 포스트 관리
  - name: Channels
    description: 채널 관리
  - name: Workspaces
    description: 워크스페이스 관리
  - name: Users
    description: 사용자 관리
  - name: Jobs
    description: 작업 관리
  - name: Timeline
    description: 타임라인 이벤트
