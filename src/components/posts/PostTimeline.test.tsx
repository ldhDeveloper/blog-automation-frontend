import { describe, it, expect, vi, beforeEach } from 'vitest';
import { render, screen } from '@testing-library/react';
import { PostTimeline } from './PostTimeline';
import type { TimelineEvent } from '@/types/api';

// üü¢ GREEN: Ïã§Ï†ú PostTimeline Ïª¥Ìè¨ÎÑåÌä∏ Íµ¨ÌòÑÏóê ÎßûÎäî Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏

// Mock API hooks
vi.mock('@/hooks/use-api', () => ({
  usePostTimeline: vi.fn(),
}));

vi.mock('@/hooks/use-sse', () => ({
  useSSE: vi.fn(),
}));

// Mock ÌÉÄÏûÑÎùºÏù∏ Îç∞Ïù¥ÌÑ∞
const mockTimelineData: TimelineEvent[] = [
  {
    id: '1',
    postId: 'post-123',
    type: 'ideate',
    status: 'completed',
    timestamp: '2024-01-01T09:00:00Z',
    message: 'ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ± ÏôÑÎ£å',
    duration: 60,
  },
  {
    id: '2',
    postId: 'post-123',
    type: 'draft',
    status: 'in-progress',
    timestamp: '2024-01-01T09:05:00Z',
    message: 'Ï¥àÏïà ÏûëÏÑ± Ï§ë',
  },
];

describe('PostTimeline', () => {
  beforeEach(() => {
    vi.clearAllMocks();
  });

  describe('Í∏∞Î≥∏ Î†åÎçîÎßÅ', () => {
    it('should render timeline header', async () => {
      // Given
      const { usePostTimeline } = await import('@/hooks/use-api');
      const { useSSE } = await import('@/hooks/use-sse');
      
      vi.mocked(usePostTimeline).mockReturnValue({
        data: { data: mockTimelineData },
        isLoading: false,
        error: null,
      } as any);
      
      vi.mocked(useSSE).mockReturnValue({
        data: null,
        isConnected: true,
        error: null,
        reconnect: vi.fn(),
      } as any);

      // When
      render(<PostTimeline postId="post-123" />);

      // Then
      expect(screen.getByText('ÏÉùÏÑ± ÌÉÄÏûÑÎùºÏù∏')).toBeInTheDocument();
    });

    it('should show empty state when no timeline data', async () => {
      // Given
      const { usePostTimeline } = await import('@/hooks/use-api');
      const { useSSE } = await import('@/hooks/use-sse');
      
      vi.mocked(usePostTimeline).mockReturnValue({
        data: { data: [] },
        isLoading: false,
        error: null,
      } as any);
      
      vi.mocked(useSSE).mockReturnValue({
        data: null,
        isConnected: true,
        error: null,
        reconnect: vi.fn(),
      } as any);

      // When
      render(<PostTimeline postId="post-123" />);

      // Then
      expect(screen.getByText('ÏïÑÏßÅ ÌÉÄÏûÑÎùºÏù∏Ïù¥ ÏóÜÏäµÎãàÎã§')).toBeInTheDocument();
      expect(screen.getByText('Ìè¨Ïä§Ìä∏ ÏÉùÏÑ±Ïù¥ ÏãúÏûëÎêòÎ©¥ ÌÉÄÏûÑÎùºÏù∏Ïù¥ ÌëúÏãúÎê©ÎãàÎã§')).toBeInTheDocument();
    });
  });

  describe('Î°úÎî© Î∞è ÏóêÎü¨ ÏÉÅÌÉú', () => {
    it('should show loading state', async () => {
      // Given
      const { usePostTimeline } = await import('@/hooks/use-api');
      const { useSSE } = await import('@/hooks/use-sse');
      
      vi.mocked(usePostTimeline).mockReturnValue({
        data: null,
        isLoading: true,
        error: null,
      } as any);
      
      vi.mocked(useSSE).mockReturnValue({
        data: null,
        isConnected: true,
        error: null,
        reconnect: vi.fn(),
      } as any);

      // When
      render(<PostTimeline postId="post-123" />);

      // Then
      expect(screen.getByText('ÌÉÄÏûÑÎùºÏù∏ Î°úÎî© Ï§ë...')).toBeInTheDocument();
    });

    it('should show error state', async () => {
      // Given
      const { usePostTimeline } = await import('@/hooks/use-api');
      const { useSSE } = await import('@/hooks/use-sse');
      
      vi.mocked(usePostTimeline).mockReturnValue({
        data: null,
        isLoading: false,
        error: new Error('API Error'),
      } as any);
      
      vi.mocked(useSSE).mockReturnValue({
        data: null,
        isConnected: true,
        error: null,
        reconnect: vi.fn(),
      } as any);

      // When
      render(<PostTimeline postId="post-123" />);

      // Then
      expect(screen.getByText('API Error')).toBeInTheDocument();
    });
  });

  describe('ÌÉÄÏûÑÎùºÏù∏ Ïù¥Î≤§Ìä∏ ÌëúÏãú', () => {
    it('should display timeline events when data is available', async () => {
      // Given
      const { usePostTimeline } = await import('@/hooks/use-api');
      const { useSSE } = await import('@/hooks/use-sse');
      
      vi.mocked(usePostTimeline).mockReturnValue({
        data: { data: mockTimelineData },
        isLoading: false,
        error: null,
      } as any);
      
      vi.mocked(useSSE).mockReturnValue({
        data: null,
        isConnected: true,
        error: null,
        reconnect: vi.fn(),
      } as any);

      // When
      render(<PostTimeline postId="post-123" />);

      // Then
      expect(screen.getByText('ÏïÑÏù¥ÎîîÏñ¥ ÏÉùÏÑ±')).toBeInTheDocument();
      expect(screen.getByText('Ï¥àÏïà ÏûëÏÑ±')).toBeInTheDocument();
    });
  });
});
